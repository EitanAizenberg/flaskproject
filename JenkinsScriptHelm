pipeline {
    agent any
    triggers {
        pollSCM('*/1 * * * *') // Makes it build every minute
    }

    stages {
        stage('Cleanup') {
            steps {
                echo 'Cleaning up!'
                cleanWs() // Cleans up the last run of the script because it cannot clone a git repository twice
            }
        }

        stage('Remove Helm Repositories') {
            steps {
                echo 'Removing existing repositories!'
                def releases = ['flaskhelm', 'prometheus', 'grafana']
        
    stage('Remove Helm Repositories') {
        steps {
            echo 'Removing existing repositories!'
        
            script {
                def releases = ['flaskhelm', 'prometheus', 'grafana']
            
                for (release in releases) {
                    def releaseExists = sh(script: "helm list -q | grep '^${release}$'", returnStatus: true)
                    if (releaseExists == 0) {
                        sh "helm uninstall ${release}"
                    } else {
                        echo "Helm release '${release}' is not installed, skipping uninstall."
                    }
                }
            }
        }
    }

        stage('Connecting to the GKE cluster') {
            steps {
                echo 'Connecting...'
                sh 'gcloud container clusters get-credentials flask-app-cluster --location us-central1-c'
            }
        }

        stage('Install Helm Repositories Into The Cluster') {
            steps {
                echo 'Installing Repositories...'
                sh '''
                  helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
                  helm repo add grafana https://grafana.github.io/helm-charts
                  helm repo add FlaskProject gs://helm-bucket1093
                  helm install flaskhelm FlaskProject/FlaskProject
                  helm install prometheus prometheus-community/prometheus
                  helm install grafana grafana/grafana
                  kubectl patch service grafana -p '{"spec": {"type": "LoadBalancer"}}'
                '''
                }
            }

        stage('Verify Deployment') {
            steps {
              sh 'kubectl get all'
            }
        }
    }
}
