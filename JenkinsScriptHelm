pipeline {
    agent any
    triggers {
        pollSCM('*/1 * * * *') // Makes it build every minute
    }

    stages {
        stage('Cleanup') {
            steps {
                echo 'Cleaning up!'
                cleanWs() // Cleans up the last run of the script because it cannot clone a git repository twice
            }
        }

        stage('Connecting to the GKE cluster') {
            steps {
                echo 'Connecting...'
                sh 'gcloud container clusters get-credentials flask-app-cluster --location us-central1-c'
            }
        }

        stage('Remove Helm Charts') {
            steps {
                script {
                    def helmList = sh(script: "helm list -q | grep -E 'flaskhelm|prometheus|grafana'", returnStatus: true).trim()
                    if (helmList == 0) {
                        echo 'Helm releases exist. Proceeding with uninstallation.'
                        sh '''
                            helm uninstall flaskhelm
                            helm uninstall prometheus
                            helm uninstall grafana
                        '''
                    } else {
                        echo 'Helm releases not found. Skipping uninstallation step.'
                    }
                }
            }
        }


        stage('Install Helm Repositories Into The Cluster') {
            steps {
                echo 'Installing Repositories...'
                sh '''
                  helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
                  helm repo add grafana https://grafana.github.io/helm-charts
                  helm repo add FlaskProject gs://helm-bucket1093
                  helm install flaskhelm FlaskProject/FlaskProject
                  helm install prometheus prometheus-community/prometheus
                  helm install grafana grafana/grafana
                  kubectl patch service grafana -p '{"spec": {"type": "LoadBalancer"}}'
                  kubectl patch service prometheus-server -p '{"spec": {"type": "LoadBalancer"}}'
                '''
            }
        }

        stage('Verify Deployment') {
            steps {
                sh '''
                kubectl get all
                kubectl get secret --namespace default grafana -o jsonpath="{.data.admin-password}" | base64 --decode ; echo
                '''
            }
        }
    }
}
